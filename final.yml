All APIs created with API Gateway expose HTTPS endpoints only.


RCU calculation

Formula:
Strongly consistent: RCU = ceil(ItemSizeKB / 4) * ReadPerSecond
Eventually consistent: RCU = Strongly consistent * 0.5

Gotcha: GSIs in DynamoDB always use eventual consistency ‚Äî strongly consistent reads are not supported.
Kinesis data streams - Consumer applications can read multiple times; retention configurable (default 24h, up to 7 days).


Stage Variables (API Gateway)

Live in API Gateway, per stage (dev, test, prod).

Used to customize backend integrations without changing code.

Passed to Lambda via mapping templates.

lambda - Concurrency 0	Reserved concurrency set to 0 disables a function

‚ö†Ô∏è Gotcha ‚Äì Hot Partitions in DynamoDB:
Even if your CloudWatch metrics show consumed capacity below provisioned limits, you can still get throttling errors due to a hot partition.

‚úÖ Fix it by:

Distributing reads/writes evenly across partition keys
Using exponential backoff on retries
üí° When to use DAX:

For read-heavy workloads where repeated reads on the same data cause latency issues
DAX caches queries in memory, giving microsecond latency
‚ùå Note: DAX does not fix hot partitions for writes and adds cost.


Merging shards reduces parallelism; splitting shards increases it.

Lambda does not automatically throttle due to too many shards, but account concurrency limits still apply.

Example: 100 shards ‚Üí at most 100 concurrent Lambda executions, regardless of record volume.


‚ö° Gotcha: Route 53 vs CloudFront (Geo Confusion!)
üåç Route 53 Geolocation = "Which door to enter?"

DNS level ‚Üí decides which endpoint/server (e.g., US users ‚Üí US ALB, EU users ‚Üí EU ALB).
Think: traffic routing before entering the building.
üì¶ CloudFront + Viewer-Country = "What do you get inside?"

Edge function ‚Üí inspects user‚Äôs country, does redirects (e.g., /us/, /uk/).
Think: same building, but different rooms inside.
üí° Memory Trick:
üëâ Route 53 = Where to go
üëâ CloudFront = What to show

‚ö†Ô∏è Common exam trap: If the scenario is about redirects or personalized content ‚Üí CloudFront Functions, NOT Route 53.

‚ö° Exam Tips
Lambda / Serverless: Blue/Green or Canary preferred for production.
EC2 / ECS: Rolling or Immutable recommended for zero-downtime.
SAM: Typically uses in-place or canary via CodeDeploy.
Always know risk vs downtime trade-off for each strategy.


Memory & CPU: Memory (128 MB ‚Äì 10,240 MB); CPU scales with memory


lambda Deployment Package
Type	Max Size	Notes
Zip file (direct upload)	50 MB	Includes your code + dependencies
Zip file (via S3)	250 MB	Upload larger code via S3
Container image	10 GB	Supports heavy dependencies, custom runtimes
Handler file must be at root of zip (unless using subdirectories + proper path)
Layers: Shared libraries or code; max 5 layers, total 250 MB


lambda Timeout: 1 sec ‚Äì 15 min (900 sec max)

lambda Event Sources
Synchronous: API Gateway, SDK calls, CloudWatch Logs ‚Üí caller waits
Asynchronous: S3, SNS, EventBridge ‚Üí Lambda invoked in background
Polling: SQS, DynamoDB Streams ‚Üí Lambda polls events


Lambda Authorizer (API Gateway):
Types: Token (header/query) or Request (any request data)

Cloud formation **StackSet = one template, many accounts/regions at once**  


# Amazon S3  
- Stores deploy artifacts (Lambda zips, CFN templates)  
- CodePipeline artifact store, supports versioning  
‚úÖ Gotcha: SAM/CFN need S3 upload  
üí° Hook: "S3 = Deploy bucket"  


# AWS Amplify  
Full-stack web/mobile deploy; Git branch = env.  
‚úÖ Gotcha: Branch mapping is exam-tested.  

# AWS Copilot  
CLI for ECS deploy; makes envs, services, pipelines.  
‚úÖ Gotcha: ECS-only (not EKS).  


Elastic BeanStalk- Gotcha: For multi-container Docker, Dockerrun.aws.json must be at root, not inside .ebextensions.


Elastic Beanstalk .ebextensions Use Case
Purpose: Automate environment configuration during deployment.
Example Use Case:
Install additional software or packages on EC2 instances.
Create custom directories or config files.
Set environment variables or run commands at deployment.


5Ô∏è‚É£ Execution Context
The sandbox environment for Lambda code.
Includes: runtime, /tmp storage (512 MB), env vars.
Warm start: context reused ‚Üí faster execution.
Cold start: new context created ‚Üí slower first run.
‚úÖ Gotcha: /tmp persists only for warm starts, not cold.


Gotcha: Always use IAM roles + trust policies, not IAM users/keys, for cross-account setups.

Automatic Key Rotation:
AWS managed keys ‚Üí rotated every 3 years.
Customer managed keys ‚Üí optional yearly rotation.

 Hotlinking Prevention
Hotlinking: Other sites link to your S3 files ‚Üí you pay bandwidth.
Fix: Use CloudFront + Signed URLs/Cookies.
Gotcha:
S3 Pre-signed URL ‚Üí object-level temp access.
CloudFront Signed URL/Cookie ‚Üí best for hotlinking.


Cross-account access: trust policy must allow external account‚Äôs IAM principal.

Cross-account access (AWS ‚Üí AWS): Use IAM Roles + Trust Policies.

External access (on-prem / local machine / external apps): Use long-term AWS access keys (stored in ~/.aws/credentials or env vars).

‚ö° Gotcha: For on-prem/external, if possible use federation + AssumeRoleWithSAML/WebIdentity instead of static keys (best practice, avoids hardcoding).

Q: When should you use Lambda Authorizer?
A: When you need custom auth logic (e.g., non-AWS identity provider, special token validation).

‚ö° Gotcha
lambda authorizer is Not for ‚Äúauthorizing Lambda directly.‚Äù
It‚Äôs the gatekeeper at API Gateway.
Response must return an IAM policy (Allow/Deny).


Feature	Cognito Sync (Legacy)	AppSync
Purpose	Sync user data/preferences across devices	Build GraphQL APIs for apps
What it syncs	Key-value pairs (like settings, game scores)	Any app data from DynamoDB, Lambda, RDS, etc.
Scope	Per-user data	App-wide data/API layer
Backend	Uses Cognito Identity + datasets	Managed GraphQL service
Status	Legacy / deprecated ‚Üí replaced by AppSync	Actively supported, modern choice
